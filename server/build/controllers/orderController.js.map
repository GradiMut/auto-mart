{"version":3,"sources":["../../src/controllers/orderController.js"],"names":["orderDb","require","Order","req","res","status","send","message","orders","body","buyer","carId","price","currentDate","Date","date","getFullYear","getMonth","getDate","order","id","length","amount","priceOffered","createdOn","push","parseInt","params","orderFound","itemIndex","map","index","newOrder","newPriceOffered","splice","orderController","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable class-methods-use-this */\n// jshint esversion: 6\nconst orderDb = require('../data/orders');\n\nclass Order {\n  // gett all offers\n  getAllOrders(req, res) {\n    return res.status(200).send({\n      status: 200,\n      message: 'Succes',\n      orders: orderDb,\n    });\n  }\n\n  // make an order\n  makeAnOffer(req, res) {\n    if (!req.body.buyer) {\n      return res.status(400).send({\n        status: 400,\n        message: 'Failled to post, You do not have an account!',\n      });\n    }\n    if (!req.body.carId) {\n      return res.status(400).send({\n        status: 400,\n        message: 'Failled to post, Car does not existe',\n      });\n    }\n    if (!req.body.price) {\n      return res.status(400).send({\n        status: 400,\n        message: 'Failled to post, Amount is required',\n      });\n    }\n    if (!req.body.status) {\n      return res.status(400).send({\n        status: 400,\n        message: 'Failled to post, Status is required',\n      });\n    }\n\n    const currentDate = new Date();\n    const date = `${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${currentDate.getDate()}`;\n\n    const order = {\n      id: orderDb.length + 1,\n      buyer: req.body.buyer,\n      carId: req.body.carId,\n      price: req.body.amount,\n      priceOffered: req.body.priceOffered,\n      status: 'pending',\n      createdOn: date,\n    };\n\n    orderDb.push(order);\n    return res.status(201).send({\n      status: 201,\n      message: 'Your offer has been made',\n      order,\n    });\n  }\n\n  updateOrderPrice(req, res) {\n    const id = parseInt(req.params.id, 10);\n    let orderFound;\n    let itemIndex;\n    orderDb.map((order, index) => {\n      if (order.id === id) {\n        orderFound = order;\n        itemIndex = index;\n      }\n    });\n\n    if (!orderFound) {\n      return res.status(404).send({\n        status: 404,\n        message: 'order not found',\n      });\n    }\n\n    if (orderFound.status !== 'pending') {\n      return res.status(400).send({\n        status: 400,\n        message: 'Only pending purchase order can be update!',\n      });\n    }\n    const currentDate = new Date();\n    const date = `${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${currentDate.getDate()}`;\n\n    const newOrder = {\n      id: orderFound.id,\n      buyer: orderFound.buyer,\n      carId: orderFound.carId,\n      price: orderFound.price,\n      priceOffered: orderFound.priceOffered,\n      newPriceOffered: req.body.newPriceOffered,\n      status: 'pending',\n      createdOn: date,\n    };\n\n    orderDb.splice(itemIndex, 1, newOrder);\n\n    return res.status(201).send({\n      status: 201,\n      message: 'order added statusfully',\n      newOrder,\n    });\n  }\n}\n\nconst orderController = new Order();\nmodule.exports = orderController;\n"],"file":"orderController.js"}